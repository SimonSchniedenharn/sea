cmake_minimum_required(VERSION 3.9)
project(sea)
#set(PROJECT_SOURCE_DIR .)
include(gtest.cmake)

SET(COVERAGE OFF CACHE BOOL "Coverage")

# Project Structure
set(LIBRARY_OUTPUT_PATH lib)                                    # generated library files
set(EXECUTABLE_OUTPUT_PATH bin)                                 # generated binary files
set(CMAKE_INCLUDE_PATH include/)


set(CMAKE_INCLUDE_CURRENT_DIR ON)

# --------------------------------------------------- #
#                   Dependencies
# --------------------------------------------------- #
include(ExternalProject)
find_program(MAKE NAMES cmake make)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# --------------------------------------------------- #
#                   ogdf library
# --------------------------------------------------- #
#ExternalProject_Add(OGDF_PROJECT
#        GIT_REPOSITORY git@github.com:ogdf/ogdf.git
#        PREFIX ${CMAKE_CURRENT_BINARY_DIR}/third-party/ogdf
#        BUILD_COMMAND ${MAKE} .)
#ExternalProject_Get_Property(OGDF_PROJECT install_dir)
#ExternalProject_Get_Property(OGDF_PROJECT source_dir)
#
#MESSAGE(STATUS "OGDF_INSTALL_DIR ${install_dir}")
#MESSAGE(STATUS "OGDF_SOURCE_DIR ${source_dir}")
#
#add_library(OGDF STATIC IMPORTED)
#set_property(TARGET OGDF PROPERTY IMPORTED_LOCATION "${install_dir}/src/OGDF_PROJECT/${CMAKE_CFG_INTDIR}/OGDF.lib")
#add_library(COIN STATIC IMPORTED)
#set_property(TARGET COIN PROPERTY IMPORTED_LOCATION "${install_dir}/src/OGDF_PROJECT-build/${CMAKE_CFG_INTDIR}/COIN.lib")
#include_directories("${source_dir}/include" "${install_dir}/src/OGDF_PROJECT-build/include")

# --------------------------------------------------- #
#                   Boost library
# --------------------------------------------------- #
set( Boost_Bootstrap_Command )
if( UNIX )
    set( Boost_Bootstrap_Command ./bootstrap.sh )
    set( Boost_b2_Command ./b2 )
else()
    if( WIN32 )
        set( Boost_Bootstrap_Command bootstrap.bat )
        set( Boost_b2_Command b2.exe )
    endif()
endif()

ExternalProject_Add(BOOST_PROJECT
        URL https://sourceforge.net/projects/boost/files/boost/1.62.0/boost_1_62_0.tar.bz2
        PREFIX ${CMAKE_CURRENT_BINARY_DIR}/third-party/boost
        BUILD_IN_SOURCE 1
        UPDATE_COMMAND ""
        PATCH_COMMAND ""
        CONFIGURE_COMMAND ${Boost_Bootstrap_Command}
        BUILD_COMMAND  ${Boost_b2_Command} install
        --without-python
        --without-mpi
        --without-random
        --without-log
        --without-regex
        --without-serialization
        --without-test
        --without-thread
        --without-timer
        --without-type_erasure
        --without-wave
        --without-atomic
        --without-chrono
        --without-container
        --without-context
        --without-coroutine
        --without-date_time
        --without-exception
        --without-fiber
        --without-filesystem
        --without-locale
        --without-signals
        --without-program_options
        --without-math
        --without-iostreams
        --without-graph_parallel
        --without-graph
        --without-system
        --disable-icu
        --prefix=${CMAKE_CURRENT_BINARY_DIR}/third-party/boost
        --threading=single,multi
        --link=shared
        --variant=release
        -j8
        INSTALL_COMMAND "")

ExternalProject_Get_Property(BOOST_PROJECT install_dir)

set(Boost_INCLUDE_DIR ${install_dir}/include/ )

#add_library(boost STATIC IMPORTED)
#add_dependencies(boost BOOST_PROJECT)
#set_property(TARGET boost PROPERTY IMPORTED_LOCATION "${install_dir}/lib/libboost_system.a")
#MESSAGE(STATUS "BOOST: ${Boost_INCLUDE_DIR}")

#find_package(OGDF CONFIG PATHS "ogdf" REQUIRED)
#if(NOT OGDF_FOUND)
#    message(FATAL_ERROR "No OGDF configuration for CMake has been found. "
#            "Please set OGDF_CONFIG_SEARCH_PATH such that ogdf-config.cmake (generated by your OGDF build) can be found.")
#endif()

# --------------------------------------------------- #
#                   gtest library
# --------------------------------------------------- #


# --------------------------------------------------- #
#                   build library
# --------------------------------------------------- #
include_directories(${CMAKE_INCLUDE_PATH} ${Boost_INCLUDE_DIR})
file(GLOB LIB_SOURCES "src/*.cpp")

add_library(sealib SHARED ${LIB_SOURCES})
#add_dependencies(sealib boost)
add_dependencies(sealib BOOST_PROJECT)
target_link_libraries(sealib ${COIN_LIBRARY} ${OGDF_LIBRARY})
target_compile_options(sealib PRIVATE -std=c++17 -g -Wall -Werror -Wextra -Wsign-conversion -Wpedantic -Wconversion -Wswitch-default -Wswitch-enum -Wunreachable-code -Wwrite-strings -Wcast-align -Wshadow -Wundef)

# --------------------------------------------------- #
#                   build tests
# --------------------------------------------------- #
file(GLOB TESTS "test/*.cpp")                                   # all test files

# --------------------------------------------------- #
#                   build view
# --------------------------------------------------- #
#add_dependencies(sealib_main OGDF_PROJECT)
set(MAIN_FILE ${CMAKE_SOURCE_DIR}/src/main.cpp)                 # full name of the main file


## QT STUFF
#set(SOURCE_FILES
#        src_view/main.cpp
#        src_view/mainwindow.cpp
#        )
#
#
## Include Qt basic functions
#include(QtCommon)
#
#set(RESOURCE_FILES example.qrc)
#find_package(Qt5Widgets REQUIRED)
#
#include_directories(${CMAKE_INCLUDE_PATH})
#
#add_executable(sealib_main ${MAIN_FILE} ${SOURCES} #${OS_BUNDLE} # Expands to WIN32 or MACOS_BUNDLE depending on OS
#        ${SOURCE_FILES} ${META_FILES_TO_INCLUDE} ${RESOURCE_FILES}) #${OGDF_INCLUDE_DIRS})
#target_include_directories(sealib_main PRIVATE) #${OGDF_INCLUDE_DIRS})
#
#qt5_use_modules(sealib_main Widgets)
#
#add_executable(tests ${SOURCES} ${TESTS})
#find_package(Threads)
#target_link_libraries(tests gtest Qt5::Widgets ${CMAKE_THREAD_LIBS_INIT})
#
if (MSVC)
#    target_compile_options(tests PRIVATE /std:c++17 /W4 /WX)
#    target_compile_options(sealib_main PRIVATE /std:c++17 /W4 /WX)

    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Od")

    # VS 2017 removed tr1
    add_definitions(-DGTEST_HAS_TR1_TUPLE=0)
else ()
#    target_compile_options(tests PRIVATE -std=c++14 -g -Wall -Werror -Wextra -Wpedantic -Wconversion -Wswitch-default -Wswitch-enum -Wunreachable-code -Wwrite-strings -Wcast-align -Wshadow -Wundef)
#    target_compile_options(sealib_main PRIVATE -std=c++14 -g -Wall -Werror -Wextra -Wpedantic -Wconversion -Wswitch-default -Wswitch-enum -Wunreachable-code -Wwrite-strings -Wcast-align -Wshadow -Wundef)

    if (COVERAGE)
        MESSAGE(STATUS "Link Coverage")
#        target_compile_options(tests PRIVATE --coverage)
#        target_link_libraries(tests --coverage)
    endif ()
endif ()